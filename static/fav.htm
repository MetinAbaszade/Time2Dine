<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Time2Dine Favorites</title>
    <link rel="stylesheet" href="/static/style.css" />
    <link rel="stylesheet" href="/static/fav.css" />
    <script src="/static/utils.js"></script>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css"
    />
    <style>
      .autocomplete-box {
        max-width: 500px;
        margin: auto;
      }
      input {
        width: 100%;
        padding: 8px;
        font-size: 16px;
      }
    </style>

    <link
    rel="stylesheet"
    href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css"
    />
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.min.js"></script>

  </head>

  <body>
    <div class="loader"></div>
    <header>
      <div class="logo">
        <a href="index.htm"> Time2Dine </a>
      </div>
      <div class="right-side2">
        <div class="home">
          <a href="index.htm">Home</a>
        </div>
    </header>

    <section id="search" class="search-section">
      <h1>Search Here</h1>
      <div class="search-box">
        <input
          style="width: 100%"
          type="text"
          id="search-input"
          placeholder="Restaurant & Café"
        />
        <i class="fa-solid fa-magnifying-glass"></i>
      </div>
    </section>

    <section id="favorites" class="recommended-restaurants">
      <h2>Your Favorites</h2>
      <div class="restaurant-list"></div>
    </section>

    <footer>
      <div class="footer-links">
        <a href="#">Support</a>
        <a href="imprint.htm">Imprint Page</a>
        <a href="#">Terms and settings</a>
      </div>
      <div class="footer-info">
        <p>
          Coronavirus (COVID-19) FAQs | Manage your trips | Contact Customer
          Service
        </p>
        <p>Privacy & cookies | Terms and conditions | Dispute resolution</p>
      </div>
    </footer>

    <script>
      window.addEventListener("load", () => {
        const loader = document.querySelector(".loader");
        
        // Function to simulate fetching data from the database
        async function fetchDataFromDatabase() {
          // Simulating a delay (e.g., fetching data from database)
          return new Promise((resolve) => {
            setTimeout(() => {
              const dataArray = [1, 2, 3, 4, 5]; // Example array from "database"
              resolve(dataArray);
            }, 2000); // 2-second delay
          });
        }

        // Fetch data and hide loader once it's done
        fetchDataFromDatabase().then((data) => {
          loader.classList.add("loader-hidden");

          loader.addEventListener("transitionend", () => {
            document.body.removeChild(loader);
          });
        });
      });
      
      function renderFoodSpots(foodSpots) {
        const $restaurantList = $(".restaurant-list"); // Select the container using jQuery
        $restaurantList.empty(); // Clear any existing content
    
        foodSpots.forEach((spot) => {
          const $spotElement = $(`
            <div class="restaurant-item">
              <h3>${spot.name}</h3>
              <p>${spot.description}</p>
            </div>
          `);
          $restaurantList.append($spotElement); // Append each dynamically created element
        });
      }

      const token = getcookie("token");
  
      function debounce(func, delay) {
        let timeout;
        return function (...args) {
          clearTimeout(timeout);
          timeout = setTimeout(() => func.apply(this, args), delay);
        };
      }

      async function fetchFavorites(query = "") {
        try {
          const response = await fetch(
            `http://5.75.182.107:8024/get_favorites?q=${encodeURIComponent(query)}`,
            {
              headers: {
                Authorization: `Bearer ${token}`,
                "Content-Type": "application/json",
              },
            }
          );
          if (response.status === 401) {
            window.location.href = "login.htm";
            return;
          }
          const favoritesArray = await response.json();
          renderFavorites(favoritesArray);
        } catch (error) {
          console.error("Error fetching favorite food spots:", error);
        }
      }

      function renderFavorites(favoritesArray) {
        const restaurantList = document.querySelector(".restaurant-list");
        restaurantList.innerHTML = "";

        favoritesArray.forEach((favorite, index) => {
          const foodSpotItem = document.createElement("div");
          foodSpotItem.classList.add("restaurant-item");

          foodSpotItem.innerHTML = `
              <img src="${favorite.ImageUrl}" alt="FoodSpot Image" />
              <div class="restaurant-info">
                <span>${favorite.Name}</span>
                <div class="stars">
                  <span class="rate">Rate</span>
                  <span>${"★".repeat(Math.round(favorite.Rating))}</span>
                </div>
                <div class="addtofav">
                  <i class="${
                    favorite.isFavorite ? "fa-solid" : "fa-regular"
                  } fa-heart"></i>
                </div>
              </div>`;

          const heartIcon = foodSpotItem.querySelector(".addtofav i");
          heartIcon.addEventListener("click", (event) => {
            event.stopPropagation();
            toggleFavorite(favorite, heartIcon, index, favoritesArray);
          });

          foodSpotItem.addEventListener("click", () => {
            window.location.href = `restaurant.htm?id=${favorite.FoodSpotId}`;
          });
          restaurantList.appendChild(foodSpotItem);
        });
      }

      function toggleFavorite(favorite, heartIcon, index, favoritesArray) {
        favorite.isFavorite = !favorite.isFavorite;

        if (favorite.isFavorite) {
          heartIcon.classList.remove("fa-regular");
          heartIcon.classList.add("fa-solid");
        } else {
          heartIcon.classList.remove("fa-solid");
          heartIcon.classList.add("fa-regular");
        }

        fetch("http://5.75.182.107:8024/toggle_favorite", {
          method: "POST",
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            foodSpotId: favorite.FoodSpotId,
          }),
        })
          .then((response) => {
            if (response.status === 401) {
              window.location.href = "login.htm";
              return;
            }
            return response.json();
          })
          .then((data) => {
            if (data.message) {
              if (!favorite.isFavorite) {
                favoritesArray.splice(index, 1); // Remove from array
                renderFavorites(favoritesArray); // Re-render favorites
              }
            }
          })
          .catch((error) => {
            console.error("Error toggling favorite:", error);
          });
      }

      // Debounced version of fetchFavorites
      const debouncedFetchFavorites = debounce(fetchFavorites, 300);

      // Event listener for search input with debounce
      const searchInput = document.getElementById("search-input");
      searchInput.addEventListener("input", (event) => {
        const query = event.target.value;
        debouncedFetchFavorites(query); // Fetch favorites based on search query with debounce
      });

      // window.onload = function () {
      //   fetchFavorites();
      // };
      window.onload = function () {
        const token = getcookie("token");
    
        if (!token) {
          // Redirect to login page immediately if token is missing
          window.location.href = "login.htm";
        } else {
          fetchFavorites();
          // Show the body if the token exists
          document.body.style.display = "block";
        }
    
        // Attach autocomplete functionality to the search input
        $("#search-input").autocomplete({
          source: function (request, response) {
            // Perform an AJAX request for autocomplete suggestions
            $.ajax({
              url: "http://5.75.182.107:8024/autocomplete_favorites", 
              // url: "http://5.75.182.107:8024/autocomplete_foodspots",
              dataType: "json",
              data: {
                q: request.term // Send the search term
              },
              headers: {
                Authorization: `Bearer ${getcookie("token")}` // Include token for authorization
              },
              success: function (data) {
                response(data); // Provide suggestions to the autocomplete widget
              },
              error: function (xhr, status, error) {
                console.error("Error fetching autocomplete suggestions:", error);
              }
            });
          },
          minLength: 2, // Trigger autocomplete after 2+ characters
          select: function (event, ui) {
            console.log("Selected:", ui.item.value);
            const selectedQuery = ui.item.value;
            fetchFavorites(selectedQuery);
          },
          open: function () {
            // Optional: Apply a custom z-index for the dropdown if needed
            $(".ui-autocomplete").css("z-index", 9999);
            // Clear the accessibility message
            $(".ui-helper-hidden-accessible").empty();
          }
        });
      
      };
  
    </script>
  </body>
</html>
