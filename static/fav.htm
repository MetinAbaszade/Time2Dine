<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Time2Dine Favorites</title>
    <link rel="stylesheet" href="/static/style.css" />
    <link rel="stylesheet" href="/static/fav.css" />
    <script src="/static/utils.js"></script>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css"
    />
  </head>

  <body>
    <header>
      <div class="logo">
        <a href="index.htm">Time2Dine</a>
      </div>
      <div class="navbar">
        <div class="menu-button">
          <a href="#">Menu</a>
        </div>
        <ul class="dropdown-menu">
          <li><a href="index.htm">Home</a></li>
          <li><a href="login.htm">Log In</a></li>
          <li><a href="register.htm">Register</a></li>
          <li><a href="fav.htm">Favorites</a></li>
        </ul>
      </div>
    </header>

    <section id="search" class="search-section">
      <h1>Search Here</h1>
      <div class="search-box">
        <input
          style="width: 100%"
          type="text"
          id="search-input"
          placeholder="Restaurant & Café"
        />
        <i class="fa-solid fa-magnifying-glass"></i>
      </div>
    </section>

    <section id="favorites" class="recommended-restaurants">
      <h2>Your Favorites</h2>
      <div class="restaurant-list"></div>
    </section>

    <footer>
      <div class="footer-links">
        <a href="#">Support</a>
        <a href="imprint.htm">Imprint Page</a>
        <a href="#">Terms and settings</a>
      </div>
      <div class="footer-info">
        <p>
          Coronavirus (COVID-19) FAQs | Manage your trips | Contact Customer
          Service
        </p>
        <p>Privacy & cookies | Terms and conditions | Dispute resolution</p>
      </div>
    </footer>

    <script>
      const token = getcookie("token");

      // Function to debounce input
      function debounce(func, delay) {
        let timeout;
        return function (...args) {
          clearTimeout(timeout);
          timeout = setTimeout(() => func.apply(this, args), delay);
        };
      }

      async function fetchFavorites(query = "") {
        try {
          const response = await fetch(
            `http://5.75.182.107:8024/get_favorites?q=${encodeURIComponent(query)}`,
            {
              headers: {
                Authorization: `Bearer ${token}`,
                "Content-Type": "application/json",
              },
            }
          );
          if (response.status === 401) {
            window.location.href = "login.htm";
            return;
          }
          const favoritesArray = await response.json();
          renderFavorites(favoritesArray);
        } catch (error) {
          console.error("Error fetching favorite food spots:", error);
        }
      }

      function renderFavorites(favoritesArray) {
        const restaurantList = document.querySelector(".restaurant-list");
        restaurantList.innerHTML = "";

        favoritesArray.forEach((favorite, index) => {
          const foodSpotItem = document.createElement("div");
          foodSpotItem.classList.add("restaurant-item");

          foodSpotItem.innerHTML = `
              <img src="${favorite.ImageUrl}" alt="FoodSpot Image" />
              <div class="restaurant-info">
                <span>${favorite.Name}</span>
                <div class="stars">
                  <span class="rate">Rate</span>
                  <span>${"★".repeat(Math.round(favorite.Rating))}</span>
                </div>
                <div class="addtofav">
                  <i class="${
                    favorite.isFavorite ? "fa-solid" : "fa-regular"
                  } fa-heart"></i>
                </div>
              </div>`;

          const heartIcon = foodSpotItem.querySelector(".addtofav i");
          heartIcon.addEventListener("click", (event) => {
            event.stopPropagation();
            toggleFavorite(favorite, heartIcon, index, favoritesArray);
          });

          foodSpotItem.addEventListener("click", () => {
            window.location.href = `restaurant.htm?id=${favorite.FoodSpotId}`;
          });
          restaurantList.appendChild(foodSpotItem);
        });
      }

      function toggleFavorite(favorite, heartIcon, index, favoritesArray) {
        favorite.isFavorite = !favorite.isFavorite;

        if (favorite.isFavorite) {
          heartIcon.classList.remove("fa-regular");
          heartIcon.classList.add("fa-solid");
          console.log(`Added ${favorite.Name} to favorites`);
        } else {
          heartIcon.classList.remove("fa-solid");
          heartIcon.classList.add("fa-regular");
          console.log(`Removed ${favorite.Name} from favorites`);
        }

        fetch("http://5.75.182.107:8024/toggle_favorite", {
          method: "POST",
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            foodSpotId: favorite.FoodSpotId,
          }),
        })
          .then((response) => {
            if (response.status === 401) {
              window.location.href = "login.htm";
              return;
            }
            return response.json();
          })
          .then((data) => {
            if (data.message) {
              console.log(data.message);
              if (!favorite.isFavorite) {
                favoritesArray.splice(index, 1); // Remove from array
                renderFavorites(favoritesArray); // Re-render favorites
              }
            }
          })
          .catch((error) => {
            console.error("Error toggling favorite:", error);
          });
      }

      // Debounced version of fetchFavorites
      const debouncedFetchFavorites = debounce(fetchFavorites, 300);

      // Event listener for search input with debounce
      const searchInput = document.getElementById("search-input");
      searchInput.addEventListener("input", (event) => {
        const query = event.target.value;
        debouncedFetchFavorites(query); // Fetch favorites based on search query with debounce
      });

      // Initial fetch of favorites without search
      window.onload = function () {
        fetchFavorites();
      };
    </script>
  </body>
</html>
