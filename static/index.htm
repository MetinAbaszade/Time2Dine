<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="/static/style.css" />
    <script src="utils.js"></script>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css"
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css"
      integrity="sha512-Kc323vGBEqzTmouAECnVceyQqyqdsSiqLQISBL29aUW4U/M7pSPA/gEUZQqv1cwx4OnYxTxve5UMg5GT6L4JJg=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    />
    <title>Time2Dine</title>

    <script>
      // document.getElementById("rating").addEventListener("input", function () {
      // const rating = parseInt(this.value);
      // if (rating < 1) this.value = 1;
      // if (rating > 5) this.value = 5;
      // });

      window.addEventListener("load", () => {
        const loader = document.querySelector(".loader");
        
        // Function to simulate fetching data from the database
        async function fetchDataFromDatabase() {
          // Simulating a delay (e.g., fetching data from database)
          return new Promise((resolve) => {
            setTimeout(() => {
              const dataArray = [1, 2, 3, 4, 5]; // Example array from "database"
              resolve(dataArray);
            }, 2000); // 2-second delay
          });
        }

        // Fetch data and hide loader once it's done
        fetchDataFromDatabase().then((data) => {
          console.log("Data received:", data); // Use the data as needed
          loader.classList.add("loader-hidden");

          loader.addEventListener("transitionend", () => {
            document.body.removeChild(loader);
          });
        });
      });


      // Token check
      window.onload = async function () {
        const token = getcookie("token");

        if (!token) {
          // Redirect to login page immediately if token is missing
          window.location.href = "login.htm";
        } else {
          // Show the body if the token exists
          document.body.style.display = "block";

          const isAdmin = await checkUserRole();
          if (isAdmin == 1) {
            // If the user is an admin, redirect to admin page
            window.location.href = "admin.htm";
          } else {
            // If the user is not an admin, fetch food spots
            fetchFoodSpots();
          }
        }

        // Attach search input debounce functionality
        const searchInput = document.querySelector('.search-box input[type="text"]');
        searchInput.addEventListener("input", debouncedFetchFoodSpots);
      };

      async function checkUserRole(query = "") {
        try {
          
          const token = getcookie("token");
          const response = await fetch(`http://5.75.182.107:8024/is_admin?q=${query}`, {
            method: "GET",
            headers: {
              Authorization: `Bearer ${token}`,
              "Content-Type": "application/json",
            },
          });
          
          if (!response.ok) throw new Error('Network response was not ok');
          
          const userData = await response.json();
          console.log(userData.isAdmin);
          // Return 1 if the user is an admin, otherwise 0
          return userData.isAdmin ? 1 : 0;
        } catch (error) {
          console.error("Error fetching user role:", error);
          return 0; // Default to 0 if there's an error
        }
      }

      function debounce(func, delay) {
        let timeout;
        return function (...args) {
          clearTimeout(timeout);
          timeout = setTimeout(() => func.apply(this, args), delay);
        };
      }

      // Function to fetch filtered food spots based on the search query
      async function fetchFoodSpots(query = "") {
        try {
          const token = getcookie("token");
          const response = await fetch(
            `http://5.75.182.107:8024/get_foodspots?q=${query}`,
            {
              method: "GET",
              headers: {
                Authorization: `Bearer ${token}`,
                "Content-Type": "application/json",
              },
            }
          );
          if (response.status === 401) {
            // Redirect to login page if unauthorized
            window.location.href = "login.htm";
          } else if (response.ok) {
            const foodSpots = await response.json();
            console.log(foodSpots);

            const restaurantList = document.querySelector(".restaurant-list");
            restaurantList.innerHTML = "";

            foodSpots.forEach((foodSpot) => {
              const foodSpotItem = document.createElement("div");
              foodSpotItem.classList.add("restaurant-item");

              foodSpotItem.innerHTML = `
                <img src="${foodSpot.ImageUrl}" alt="Restaurant Image" />
                <div class="restaurant-info">
                  <span>${foodSpot.Name}</span>
                  <div class="stars">
                    <span class="rate">Rate</span>
                    <span>${"★".repeat(Math.round(foodSpot.Rating))}</span>
                  </div>
                  <div class="addtofav">
                    <i class="${
                      foodSpot.IsFavorite == 1 ? "fa-solid" : "fa-regular"
                    } fa-heart"></i>
                  </div>
                </div>
              `;

              const heartIcon = foodSpotItem.querySelector(".addtofav i");
              heartIcon.addEventListener("click", (event) => {
                event.stopPropagation();
                foodSpot.IsFavorite = !foodSpot.IsFavorite;
                if (foodSpot.IsFavorite) {
                  heartIcon.className = "";
                  heartIcon.classList.add("fa-solid", "fa-heart");
                  console.log(`Added ${foodSpot.Name} to favorites`);

                  fetch("http://5.75.182.107:8024/toggle_favorite", {
                    method: "POST",
                    headers: {
                      Authorization: `Bearer ${token}`,
                      "Content-Type": "application/json",
                    },
                    body: JSON.stringify({
                      foodSpotId: foodSpot.FoodSpotId,
                    }),
                  })
                    .then((response) => response.json())
                    .then((data) => {
                      if (data.message) {
                        console.log(data.message);
                      }
                    })
                    .catch((error) => {
                      console.error("Error adding to favorites:", error);
                    });
                } else {
                  heartIcon.className = "";
                  heartIcon.classList.add("fa-regular", "fa-heart");
                  console.log(`Removed ${foodSpot.Name} from favorites`);
                  fetch("http://5.75.182.107:8024/toggle_favorite", {
                    method: "POST",
                    headers: {
                      Authorization: `Bearer ${token}`,
                      "Content-Type": "application/json",
                    },
                    body: JSON.stringify({
                      foodSpotId: foodSpot.FoodSpotId
                    }),
                  })
                    .then((response) => response.json())
                    .then((data) => {
                      if (data.message) {
                        console.log(data.message);
                      }
                    })
                    .catch((error) => {
                      console.error("Error removing from favorites:", error);
                    });
                }
              });

              foodSpotItem.addEventListener("click", () => {
                window.location.href = `restaurant.htm?id=${foodSpot.FoodSpotId}`;
              });
              restaurantList.appendChild(foodSpotItem);
            });
          }
        } catch (error) {
          console.error("Error fetching food spots:", error);
        }
      }

      const debouncedFetchFoodSpots = debounce(function (event) {
        const query = event.target.value;
        fetchFoodSpots(query);
      }, 300);
    </script>
  </head>

  <body style="display: none">
    <header>
      <div class="logo">
        <a href="index.htm"> Time2Dine </a>
      </div>

      <div class="navbar">
        <div class="menu-button">
          <a href="#">Menu</a>
        </div>
        <ul class="dropdown-menu">
          <li><a href="#">Home</a></li>
          <li><a href="login.htm">Log In</a></li>
          <li><a href="register.htm">Register</a></li>
          <li><a href="fav.htm">Favorites</a></li>
          <li><a href="#search">Search</a></li>
          <li><a href="#restaurants">Restaurants</a></li>
          <li><a href="#restaurants">Add to Fav</a></li>
        </ul>
      </div>
    </header>
    <div class="loader"></div>
    <section id="search" class="search-section">
      <h1>Search Restaurant & Café</h1>
      <div class="search-box">
        <input
          style="width: 230px"
          type="text"
          placeholder="Restaurant & Café"
        />
        <input type="text" placeholder="City" />
        <input
          style="width: 100px"
          type="number"
          placeholder="Rating"
          min="1"
          max="5"
        />
        <input type="date" />
      </div>
    </section>

    <section id="restaurants" class="recommended-restaurants">
      <h2>Recommended Restaurants & Cafés</h2>
      <div class="restaurant-list"></div>
    </section>

    <footer>
      <div class="footer-links">
        <a href="#">Support</a>
        <a href="imprint.htm">Imprint Page</a>
        <a href="#">Terms and settings</a>
      </div>
      <div class="footer-info">
        <p>
          Coronavirus (COVID-19) FAQs | Manage your trips | Contact Customer
          Service
        </p>
        <p>Privacy & cookies | Terms and conditions | Dispute resolution</p>
      </div>
    </footer>
  </body>
</html>
