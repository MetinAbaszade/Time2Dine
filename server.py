from flask import Flask, request, jsonify
from flask_cors import CORS 
import mysql.connector, datetime
from sshtunnel import SSHTunnelForwarder

app = Flask(__name__)
CORS(app, resources={r"/*": {"origins": "*"}})

# Set up SSH tunnel with a different local bind port
tunnel = SSHTunnelForwarder(
    ('5.75.182.107', 22),  
    ssh_username='bgazanfar',  
    ssh_password='MdEbbp',
    remote_bind_address=('127.0.0.1', 3306),
    local_bind_address=('127.0.0.1', 10022),  
    set_keepalive=60
)

# Start the SSH tunnel
tunnel.start()

db_config = {
    'host': '127.0.0.1',
    'user': 'bgazanfar',
    'password': 'MdEbbp',
    'database': 'bgazanfar_db',
    'port': tunnel.local_bind_port, 
    'connection_timeout': 10  
}

def get_db_connection():
    print(f"Tunnel is active: {tunnel.is_active}")
    print(f"Local bind port: {tunnel.local_bind_port}")
    test= mysql.connector.connect(**db_config)
    return test

@app.route('/add_user', methods=['POST'])
def add_user():
    data = request.json
    first_name = data['firstName']
    last_name = data['lastName']
    email = data['email']
    password = data['password']
    date_of_birth = data['dateOfBirth']
    phone_number = data['phoneNumber']

    conn = get_db_connection()
    cursor = conn.cursor()

    try:
        user_query = """
            INSERT INTO users (FirstName, LastName, Email, Password, DateOfBirth, PhoneNumber)
            VALUES (%s, %s, %s, %s, %s, %s)
        """
        cursor.execute(user_query, (first_name, last_name, email, password, date_of_birth, phone_number))

        # Get the User ID generated by the database
        user_id_query = "SELECT Id FROM Users WHERE Email = %s"
        cursor.execute(user_id_query, (email,))
        user_id = cursor.fetchone()[0]

        customer_query = """
            INSERT INTO Customer (UserId)
            VALUES (%s)
        """
        cursor.execute(customer_query, (user_id,))

        conn.commit()
        return jsonify({'message': 'User and Customer added successfully'}), 201
    except mysql.connector.Error as err:
        conn.rollback()
        return jsonify({'error': str(err)}), 500
    finally:
        cursor.close()
        conn.close()

@app.route('/login', methods=['POST'])
def login():
    data = request.json
    email = data['email']
    password = data['password']

    conn = get_db_connection()
    cursor = conn.cursor()

    try:
        # Check if the user exists and the password matches
        login_query = "SELECT * FROM users WHERE Email = %s AND Password = %s"
        cursor.execute(login_query, (email, password))
        user = cursor.fetchone()

        if user:
            return jsonify({'message': 'Login successful'}), 200
        else:
            return jsonify({'error': 'Invalid email or password'}), 401
    except mysql.connector.Error as err:
        return jsonify({'error': str(err)}), 500
    finally:
        cursor.close()
        conn.close()

@app.route('/toggle_favorite', methods=['POST'])
def toggle_favorite():
    data = request.json
    food_spot_id = data['foodSpotId']
    customer_id = data['customerId']

    conn = get_db_connection()
    cursor = conn.cursor()

    try:
        check_favorite_query = """
            SELECT * FROM favorites WHERE FoodSpotId = %s AND CustomerId = %s
        """
        cursor.execute(check_favorite_query, (food_spot_id, customer_id))
        favorite = cursor.fetchone()

        if favorite:
            remove_favorite_query = """
                DELETE FROM favorites WHERE FoodSpotId = %s AND CustomerId = %s
            """
            cursor.execute(remove_favorite_query, (food_spot_id, customer_id))
            conn.commit()
            return jsonify({'message': 'Removed from favorites successfully'}), 200
        else:
            add_favorite_query = """
                INSERT INTO favorites (FoodSpotId, CustomerId)
                VALUES (%s, %s)
            """
            cursor.execute(add_favorite_query, (food_spot_id, customer_id))
            conn.commit()
            return jsonify({'message': 'Added to favorites successfully'}), 201

    except mysql.connector.Error as err:
        conn.rollback()
        return jsonify({'error': str(err)}), 500
    finally:
        cursor.close()
        conn.close()

@app.route('/get_favorites/<customer_id>', methods=['GET'])
def get_favorites(customer_id):
    conn = get_db_connection()
    cursor = conn.cursor(dictionary=True)

    try:
        favorites_query = """
            SELECT fs.Id AS FoodSpotId, 
                   fs.Name, 
                   fs.Rating, 
                   fs.ImageUrl, 
                   CASE 
                       WHEN r.Id IS NOT NULL THEN 'Restaurant'
                       WHEN c.Id IS NOT NULL THEN 'Cafe'
                       ELSE 'Unknown'
                   END AS FoodSpotType,
                   COALESCE(r.Id, c.Id) AS TypeSpecificId,
                   TRUE AS isFavorite  -- Always true since this is the favorites list
            FROM favorites f
            JOIN foodspot fs ON f.FoodSpotId = fs.Id
            LEFT JOIN restaurant r ON fs.Id = r.FoodSpotId
            LEFT JOIN cafe c ON fs.Id = c.FoodSpotId
            WHERE f.CustomerId = %s
        """
        cursor.execute(favorites_query, (customer_id,))
        favorites = cursor.fetchall()

        for favorite in favorites:
            for key, value in favorite.items():
                if isinstance(value, (datetime.datetime, datetime.date, datetime.timedelta)):
                    favorite[key] = str(value)

        return jsonify(favorites), 200
    except mysql.connector.Error as err:
        return jsonify({'error': str(err)}), 500
    finally:
        cursor.close()
        conn.close()

@app.route('/get_foodspots', methods=['GET'])
def get_foodspots():
    print("Received GET request") 
    search_query = request.args.get('q', '')  
    customer_id = '71a77d69-7b80-11ef-9c88-00090ffe0001'; 

    conn = get_db_connection()
    cursor = conn.cursor(dictionary=True)

    try:
        foodspots_query = """
            SELECT fs.Id AS FoodSpotId, fs.Name, fs.Rating, fs.ImageUrl, 
                   CASE 
                       WHEN r.Id IS NOT NULL THEN 'Restaurant'
                       WHEN c.Id IS NOT NULL THEN 'Cafe'
                       ELSE 'Unknown'
                   END AS FoodSpotType,
                   r.Id AS RestaurantId,
                   c.Id AS CafeId,
                   CASE 
                       WHEN f.CustomerId IS NOT NULL THEN TRUE
                       ELSE FALSE
                   END AS IsFavorite
            FROM foodspot fs
            LEFT JOIN restaurant r ON fs.Id = r.FoodSpotId
            LEFT JOIN cafe c ON fs.Id = c.FoodSpotId
            LEFT JOIN favorites f ON fs.Id = f.FoodSpotId AND f.CustomerId = %s
            WHERE fs.Name LIKE %s
        """
        cursor.execute(foodspots_query, (customer_id, '%' + search_query + '%'))  
        foodspots = cursor.fetchall()

        for spot in foodspots:
            for key, value in spot.items():
                if isinstance(value, (datetime.timedelta, datetime.datetime, datetime.date)):
                    spot[key] = str(value)  

        return jsonify(foodspots), 200
    except mysql.connector.Error as err:
        return jsonify({'error': str(err)}), 500
    finally:
        cursor.close()
        conn.close()

@app.route('/get_foodspot/<foodspot_id>', methods=['GET'])
def get_foodspot(foodspot_id):
    conn = get_db_connection()
    cursor = conn.cursor(dictionary=True)

    try:
        foodspot_query = """
            SELECT fs.Id AS FoodSpotId, fs.*, 
                   CASE 
                       WHEN r.Id IS NOT NULL THEN 'Restaurant'
                       WHEN c.Id IS NOT NULL THEN 'Cafe'
                       ELSE 'Unknown'
                   END AS FoodSpotType,
                   r.Id AS RestaurantId,
                   c.Id AS CafeId
            FROM foodspot fs
            LEFT JOIN restaurant r ON fs.Id = r.FoodSpotId
            LEFT JOIN cafe c ON fs.Id = c.FoodSpotId
            WHERE fs.Id = %s
        """
        cursor.execute(foodspot_query, (foodspot_id,))
        foodspot = cursor.fetchone()

        if foodspot:
            for key, value in foodspot.items():
                if isinstance(value, (datetime.datetime, datetime.date, datetime.timedelta)):
                    foodspot[key] = str(value)
            return jsonify(foodspot), 200
        else:
            return jsonify({'error': 'FoodSpot not found'}), 404
    except mysql.connector.Error as err:
        return jsonify({'error': str(err)}), 500
    finally:
        cursor.close()
        conn.close()

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5001, debug=True)